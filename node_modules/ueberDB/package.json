{
  "name": "ueberDB",
  "description": "transform every database into a object key value store",
  "url": "https://github.com/Pita/ueberDB",
  "keywords": [
    "database",
    "keyvalue"
  ],
  "author": {
    "name": "Etherpad Foundation"
  },
  "contributors": [
    {
      "name": "John McLear"
    },
    {
      "name": "spcsser"
    },
    {
      "name": "Peter Martischka"
    }
  ],
  "dependencies": {
    "mysql": "2.6.1",
    "dirty": "0.9.x",
    "async": "0.1.15",
    "channels": "0.0.4",
    "redis": ">=0.12.1",
    "pg": "4.3.0",
    "nano": "^6.1.2",
    "cassandra-driver": "2.0.1",
    "elasticsearch": "4.0.2"
  },
  "devDependencies": {
    "log4js": "0.6.22",
    "mongodb": "2.0.25"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/pita/ueberDB.git"
  },
  "main": "./CloneAndAtomicLayer",
  "version": "0.2.16",
  "readme": "#About\n\nAbstract your databases, make datababies.  ueberDB turns every database into a simple key value store by providing a layer of abstraction between your software and your database.  ueberDB uses a smart cache and buffer algorithm to make databases faster. Reads are cached and writes are done in a bulk. The bulk writing reduces the overhead of a database transaction.  The syntax is simple and clean and getting started is easy.\n\n#Database Support\n* MySQL\n* SQLite\n* Postgres\n* Level\n* Dirty\n* Mongo\n* Redis\n* Couch\n* Elasticsearch\n\n#Install\n\n`npm install ueberDB`\n\n#Example\n\n```javascript\nvar ueberDB = require(\"ueberDB\");\n\n//mysql\nvar db = new ueberDB.database(\"mysql\", {\"user\":\"root\", host: \"localhost\", \"password\":\"\", database: \"store\"});\n//sqlite in-memory\n//var db = new ueberDB.database(\"sqlite\");\n//sqlite in file\n//var db = new ueberDB.database(\"sqlite\", {filename:\"var/sqlite3.db\"});\n//sqlite in file with a write interval of a half second\n//var db = new ueberDB.database(\"sqlite\", {filename:\"var/sqlite3.db\"}, {writeInterval: 500});\n\n//initialize the database\ndb.init(function (err)\n{\n  if(err)\n  {\n    console.error(err);\n    process.exit(1);\n  }\n\n  //set a object as a value\n  //can be done without a callback, cause the value is immediately in the buffer\n  db.set(\"valueA\", {a:1,b:2});\n\n  //get the object\n  db.get(\"valueA\", function(err, value){\n    console.log(value);\n\n    db.close(function(){\n      process.exit(0);\n    });\n  });\n});\n```\n\n#How to add support for another database\nLook at sqlite_db.js and mysql_db.js, your module have to provide the same functions. Call it DATABASENAME_db.js and reimplement the functions for your database. If you think it works, test it with `node benchmark.js DATABASENAME`. Benchmark.js is benchmark and test at the same time. It tries to set 100000 values. You can pipe stderr to a file and will create a csv with benchmark results.\n\n#Limitations\nOnly mysql, dirty, mongodb and couch currently support findKeys feature. The following do not yet support the function:\n\n* leveldb\n* redis (Only keys of the format \\*:\\*:\\*)\n* cassandra (Only keys of the format \\*:\\*:\\*)\n* elasticsearch (Only keys of the format \\*:\\*:\\*)\n\nFor details on how it works please refer to the wiki: https://github.com/Pita/ueberDB/wiki/findKeys-functionality\n\n#License\n[Apache License v2](http://www.apache.org/licenses/LICENSE-2.0.html)\n",
  "readmeFilename": "README.md",
  "gitHead": "728beb5133e0e5945d3d16cd7db5c5de840ccc78",
  "bugs": {
    "url": "https://github.com/pita/ueberDB/issues"
  },
  "homepage": "https://github.com/pita/ueberDB",
  "_id": "ueberDB@0.2.16",
  "_shasum": "5c973f5a7ed17da166a2a08a5481f2eb5e4a697c",
  "_from": "git://github.com/Pita/ueberDB.git",
  "_resolved": "git://github.com/Pita/ueberDB.git#728beb5133e0e5945d3d16cd7db5c5de840ccc78",
  "_fromGithub": true
}
